apiVersion: v1
kind: ConfigMap
metadata:
  name: cfssl-bootstrap
data:
  init.sh: |
    #! /bin/sh
    # initialize Root + Intermediate CA certificates if no files exist in CA directory
    if [ "$(ls -A /initial-certificate-store)" ]; then
      exit 0 # CA cert has already been initialized
    else
      /go/bin/cfssl gencert \
        -initca /configs/root-ca.json \
        | /go/bin/cfssljson -bare root_ca

      /go/bin/cfssl gencert \
        -initca /configs/intermediate-ca.json \
        | /go/bin/cfssljson -bare intermediate_ca

      /go/bin/cfssl sign \
        -ca root_ca.pem -ca-key root_ca-key.pem \
        -config /configs/signing-profiles.json \
        -profile int \
        intermediate_ca.csr | cfssljson -bare intermediate_ca

      /go/bin/mkbundle -f int-bundle.crt intermediate_ca.pem

      /go/bin/mkbundle -f ca-bundle.crt root_ca.pem

      cat intermediate_ca.pem root_ca.pem > chain.crt

      # generate front-end server cert (https://http.cfssl.svc)
      CLUSTER_DOMAIN=`grep search /etc/resolv.conf | awk '{ print $NF }'`

      cat <<EOF > server-csr.json
      {
        "hosts": [
          "http.cfssl.svc.${CLUSTER_DOMAIN}"
        ],
        "CN": "http.cfssl.svc.${CLUSTER_DOMAIN}",
        "key": {
          "algo": "ecdsa",
          "size": 256
        }
      }
    EOF
      cfssl gencert \
        -ca intermediate_ca.pem -ca-key intermediate_ca-key.pem \
        -config /configs/signing-profiles.json \
        -profile server server-csr.json | /go/bin/cfssljson -bare server
      cat server.pem intermediate_ca.pem root_ca.pem > server-certificate.pem
    fi
