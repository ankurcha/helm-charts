apiVersion: v1
kind: ConfigMap
metadata:
  name: init-setup
data:
  gen-csr.sh: |
    #! /bin/sh
CLUSTER_DOMAIN=`grep search /etc/resolv.conf  | awk '{ print $NF }'`
cat <<EOF | cfssl gencert -remote=https://http.cfssl.svc.${CLUSTER_DOMAIN} - | cfssljson -bare server
{
  "hosts": [
    "http.{{ .Release.Namespace }}.svc.$CLUSTER_DOMAIN"
  ],
  "CN": "http.{{ .Release.Namespace }}.svc.$CLUSTER_DOMAIN",
  "key": {
    "algo": "ecdsa",
    "size": 256
  }
}
EOF
  csr-submit-cfssl.sh: |+
    cfssl gencert -remote=http.cfssl.svc -profile=server server.csr
  csr-retrieve-cfssl.sh: |
    kubectl get csr my-svc.my-namespace -o jsonpath='{.status.certificate}' \
            | base64 -d > server.crt
  csr-submit-k8s.sh: |+
    CLUSTER_DOMAIN=`grep search /etc/resolv.conf  | awk '{ print $NF }'`
    CSR=`cat server.csr | base64 | tr -d '\n'`
    cat <<EOF | kubectl create -f -
    apiVersion: certificates.k8s.io/v1beta1
    kind: CertificateSigningRequest
    metadata:
      name: http.{{ .Release.Namespace }}.svc.$CLUSTER_DOMAIN
    spec:
      groups:
      - system:authenticated
      request: $CSR
      usages:
      - digital signature
      - key encipherment
      - server auth
    EOF
  csr-retrieve-k8s.sh: |
    kubectl get csr my-svc.my-namespace -o jsonpath='{.status.certificate}' \
            | base64 -d > server.crt
